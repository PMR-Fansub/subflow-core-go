// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"subflow-core-go/pkg/ent/tasktag"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TaskTag is the model entity for the TaskTag schema.
type TaskTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskTagQuery when eager-loading is set.
	Edges        TaskTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskTagEdges holds the relations/edges for other nodes in the graph.
type TaskTagEdges struct {
	// Task holds the value of the task edge.
	Task []*Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e TaskTagEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasktag.FieldID:
			values[i] = new(sql.NullInt64)
		case tasktag.FieldName, tasktag.FieldDesc:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskTag fields.
func (tt *TaskTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasktag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case tasktag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case tasktag.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				tt.Desc = value.String
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskTag.
// This includes values selected through modifiers, order, etc.
func (tt *TaskTag) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the TaskTag entity.
func (tt *TaskTag) QueryTask() *TaskQuery {
	return NewTaskTagClient(tt.config).QueryTask(tt)
}

// Update returns a builder for updating this TaskTag.
// Note that you need to call TaskTag.Unwrap() before calling this method if this TaskTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TaskTag) Update() *TaskTagUpdateOne {
	return NewTaskTagClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TaskTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TaskTag) Unwrap() *TaskTag {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskTag is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TaskTag) String() string {
	var builder strings.Builder
	builder.WriteString("TaskTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(tt.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// TaskTags is a parsable slice of TaskTag.
type TaskTags []*TaskTag
