// Code generated by ent, DO NOT EDIT.

package workflownode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workflownode type in the database.
	Label = "workflow_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// EdgeTaskRecords holds the string denoting the task_records edge name in mutations.
	EdgeTaskRecords = "task_records"
	// EdgeWorkflow holds the string denoting the workflow edge name in mutations.
	EdgeWorkflow = "workflow"
	// Table holds the table name of the workflownode in the database.
	Table = "workflow_nodes"
	// TaskRecordsTable is the table that holds the task_records relation/edge.
	TaskRecordsTable = "task_records"
	// TaskRecordsInverseTable is the table name for the TaskRecord entity.
	// It exists in this package in order to avoid circular dependency with the "taskrecord" package.
	TaskRecordsInverseTable = "task_records"
	// TaskRecordsColumn is the table column denoting the task_records relation/edge.
	TaskRecordsColumn = "workflow_node_task_records"
	// WorkflowTable is the table that holds the workflow relation/edge.
	WorkflowTable = "workflow_nodes"
	// WorkflowInverseTable is the table name for the Workflow entity.
	// It exists in this package in order to avoid circular dependency with the "workflow" package.
	WorkflowInverseTable = "workflows"
	// WorkflowColumn is the table column denoting the workflow relation/edge.
	WorkflowColumn = "workflow_workflow_nodes"
)

// Columns holds all SQL columns for workflownode fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldDesc,
	FieldSeq,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflow_nodes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workflow_workflow_nodes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkflowNode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// BySeq orders the results by the seq field.
func BySeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeq, opts...).ToFunc()
}

// ByTaskRecordsCount orders the results by task_records count.
func ByTaskRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskRecordsStep(), opts...)
	}
}

// ByTaskRecords orders the results by task_records terms.
func ByTaskRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkflowField orders the results by workflow field.
func ByWorkflowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskRecordsTable, TaskRecordsColumn),
	)
}
func newWorkflowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
	)
}
