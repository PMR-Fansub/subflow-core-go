// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"subflow-core-go/pkg/ent/workflow"
	"subflow-core-go/pkg/ent/workflownode"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowNode is the model entity for the WorkflowNode schema.
type WorkflowNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq int `json:"seq,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowNodeQuery when eager-loading is set.
	Edges                   WorkflowNodeEdges `json:"edges"`
	workflow_workflow_nodes *int
	selectValues            sql.SelectValues
}

// WorkflowNodeEdges holds the relations/edges for other nodes in the graph.
type WorkflowNodeEdges struct {
	// TaskRecords holds the value of the task_records edge.
	TaskRecords []*TaskRecord `json:"task_records,omitempty"`
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskRecordsOrErr returns the TaskRecords value or an error if the edge
// was not loaded in eager-loading.
func (e WorkflowNodeEdges) TaskRecordsOrErr() ([]*TaskRecord, error) {
	if e.loadedTypes[0] {
		return e.TaskRecords, nil
	}
	return nil, &NotLoadedError{edge: "task_records"}
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowNodeEdges) WorkflowOrErr() (*Workflow, error) {
	if e.loadedTypes[1] {
		if e.Workflow == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflow.Label}
		}
		return e.Workflow, nil
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflownode.FieldID, workflownode.FieldType, workflownode.FieldSeq:
			values[i] = new(sql.NullInt64)
		case workflownode.FieldName, workflownode.FieldDesc:
			values[i] = new(sql.NullString)
		case workflownode.ForeignKeys[0]: // workflow_workflow_nodes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowNode fields.
func (wn *WorkflowNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflownode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wn.ID = int(value.Int64)
		case workflownode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wn.Name = value.String
			}
		case workflownode.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				wn.Type = int(value.Int64)
			}
		case workflownode.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				wn.Desc = value.String
			}
		case workflownode.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				wn.Seq = int(value.Int64)
			}
		case workflownode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workflow_workflow_nodes", value)
			} else if value.Valid {
				wn.workflow_workflow_nodes = new(int)
				*wn.workflow_workflow_nodes = int(value.Int64)
			}
		default:
			wn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowNode.
// This includes values selected through modifiers, order, etc.
func (wn *WorkflowNode) Value(name string) (ent.Value, error) {
	return wn.selectValues.Get(name)
}

// QueryTaskRecords queries the "task_records" edge of the WorkflowNode entity.
func (wn *WorkflowNode) QueryTaskRecords() *TaskRecordQuery {
	return NewWorkflowNodeClient(wn.config).QueryTaskRecords(wn)
}

// QueryWorkflow queries the "workflow" edge of the WorkflowNode entity.
func (wn *WorkflowNode) QueryWorkflow() *WorkflowQuery {
	return NewWorkflowNodeClient(wn.config).QueryWorkflow(wn)
}

// Update returns a builder for updating this WorkflowNode.
// Note that you need to call WorkflowNode.Unwrap() before calling this method if this WorkflowNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (wn *WorkflowNode) Update() *WorkflowNodeUpdateOne {
	return NewWorkflowNodeClient(wn.config).UpdateOne(wn)
}

// Unwrap unwraps the WorkflowNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wn *WorkflowNode) Unwrap() *WorkflowNode {
	_tx, ok := wn.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowNode is not a transactional entity")
	}
	wn.config.driver = _tx.drv
	return wn
}

// String implements the fmt.Stringer.
func (wn *WorkflowNode) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wn.ID))
	builder.WriteString("name=")
	builder.WriteString(wn.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", wn.Type))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(wn.Desc)
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(fmt.Sprintf("%v", wn.Seq))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowNodes is a parsable slice of WorkflowNode.
type WorkflowNodes []*WorkflowNode
