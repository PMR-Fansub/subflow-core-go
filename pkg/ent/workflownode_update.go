// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/predicate"
	"subflow-core-go/pkg/ent/taskrecord"
	"subflow-core-go/pkg/ent/workflow"
	"subflow-core-go/pkg/ent/workflownode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeUpdate is the builder for updating WorkflowNode entities.
type WorkflowNodeUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowNodeMutation
}

// Where appends a list predicates to the WorkflowNodeUpdate builder.
func (wnu *WorkflowNodeUpdate) Where(ps ...predicate.WorkflowNode) *WorkflowNodeUpdate {
	wnu.mutation.Where(ps...)
	return wnu
}

// SetName sets the "name" field.
func (wnu *WorkflowNodeUpdate) SetName(s string) *WorkflowNodeUpdate {
	wnu.mutation.SetName(s)
	return wnu
}

// SetType sets the "type" field.
func (wnu *WorkflowNodeUpdate) SetType(i int) *WorkflowNodeUpdate {
	wnu.mutation.ResetType()
	wnu.mutation.SetType(i)
	return wnu
}

// AddType adds i to the "type" field.
func (wnu *WorkflowNodeUpdate) AddType(i int) *WorkflowNodeUpdate {
	wnu.mutation.AddType(i)
	return wnu
}

// SetDesc sets the "desc" field.
func (wnu *WorkflowNodeUpdate) SetDesc(s string) *WorkflowNodeUpdate {
	wnu.mutation.SetDesc(s)
	return wnu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (wnu *WorkflowNodeUpdate) SetNillableDesc(s *string) *WorkflowNodeUpdate {
	if s != nil {
		wnu.SetDesc(*s)
	}
	return wnu
}

// ClearDesc clears the value of the "desc" field.
func (wnu *WorkflowNodeUpdate) ClearDesc() *WorkflowNodeUpdate {
	wnu.mutation.ClearDesc()
	return wnu
}

// SetSeq sets the "seq" field.
func (wnu *WorkflowNodeUpdate) SetSeq(i int) *WorkflowNodeUpdate {
	wnu.mutation.ResetSeq()
	wnu.mutation.SetSeq(i)
	return wnu
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (wnu *WorkflowNodeUpdate) SetNillableSeq(i *int) *WorkflowNodeUpdate {
	if i != nil {
		wnu.SetSeq(*i)
	}
	return wnu
}

// AddSeq adds i to the "seq" field.
func (wnu *WorkflowNodeUpdate) AddSeq(i int) *WorkflowNodeUpdate {
	wnu.mutation.AddSeq(i)
	return wnu
}

// ClearSeq clears the value of the "seq" field.
func (wnu *WorkflowNodeUpdate) ClearSeq() *WorkflowNodeUpdate {
	wnu.mutation.ClearSeq()
	return wnu
}

// AddTaskRecordIDs adds the "task_records" edge to the TaskRecord entity by IDs.
func (wnu *WorkflowNodeUpdate) AddTaskRecordIDs(ids ...int) *WorkflowNodeUpdate {
	wnu.mutation.AddTaskRecordIDs(ids...)
	return wnu
}

// AddTaskRecords adds the "task_records" edges to the TaskRecord entity.
func (wnu *WorkflowNodeUpdate) AddTaskRecords(t ...*TaskRecord) *WorkflowNodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wnu.AddTaskRecordIDs(ids...)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wnu *WorkflowNodeUpdate) SetWorkflowID(id int) *WorkflowNodeUpdate {
	wnu.mutation.SetWorkflowID(id)
	return wnu
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wnu *WorkflowNodeUpdate) SetNillableWorkflowID(id *int) *WorkflowNodeUpdate {
	if id != nil {
		wnu = wnu.SetWorkflowID(*id)
	}
	return wnu
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wnu *WorkflowNodeUpdate) SetWorkflow(w *Workflow) *WorkflowNodeUpdate {
	return wnu.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (wnu *WorkflowNodeUpdate) Mutation() *WorkflowNodeMutation {
	return wnu.mutation
}

// ClearTaskRecords clears all "task_records" edges to the TaskRecord entity.
func (wnu *WorkflowNodeUpdate) ClearTaskRecords() *WorkflowNodeUpdate {
	wnu.mutation.ClearTaskRecords()
	return wnu
}

// RemoveTaskRecordIDs removes the "task_records" edge to TaskRecord entities by IDs.
func (wnu *WorkflowNodeUpdate) RemoveTaskRecordIDs(ids ...int) *WorkflowNodeUpdate {
	wnu.mutation.RemoveTaskRecordIDs(ids...)
	return wnu
}

// RemoveTaskRecords removes "task_records" edges to TaskRecord entities.
func (wnu *WorkflowNodeUpdate) RemoveTaskRecords(t ...*TaskRecord) *WorkflowNodeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wnu.RemoveTaskRecordIDs(ids...)
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wnu *WorkflowNodeUpdate) ClearWorkflow() *WorkflowNodeUpdate {
	wnu.mutation.ClearWorkflow()
	return wnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wnu *WorkflowNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wnu.sqlSave, wnu.mutation, wnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wnu *WorkflowNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := wnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wnu *WorkflowNodeUpdate) Exec(ctx context.Context) error {
	_, err := wnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnu *WorkflowNodeUpdate) ExecX(ctx context.Context) {
	if err := wnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wnu *WorkflowNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflownode.Table, workflownode.Columns, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeInt))
	if ps := wnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wnu.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
	}
	if value, ok := wnu.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeInt, value)
	}
	if value, ok := wnu.mutation.AddedType(); ok {
		_spec.AddField(workflownode.FieldType, field.TypeInt, value)
	}
	if value, ok := wnu.mutation.Desc(); ok {
		_spec.SetField(workflownode.FieldDesc, field.TypeString, value)
	}
	if wnu.mutation.DescCleared() {
		_spec.ClearField(workflownode.FieldDesc, field.TypeString)
	}
	if value, ok := wnu.mutation.Seq(); ok {
		_spec.SetField(workflownode.FieldSeq, field.TypeInt, value)
	}
	if value, ok := wnu.mutation.AddedSeq(); ok {
		_spec.AddField(workflownode.FieldSeq, field.TypeInt, value)
	}
	if wnu.mutation.SeqCleared() {
		_spec.ClearField(workflownode.FieldSeq, field.TypeInt)
	}
	if wnu.mutation.TaskRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnu.mutation.RemovedTaskRecordsIDs(); len(nodes) > 0 && !wnu.mutation.TaskRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnu.mutation.TaskRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wnu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.WorkflowTable,
			Columns: []string{workflownode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.WorkflowTable,
			Columns: []string{workflownode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wnu.mutation.done = true
	return n, nil
}

// WorkflowNodeUpdateOne is the builder for updating a single WorkflowNode entity.
type WorkflowNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowNodeMutation
}

// SetName sets the "name" field.
func (wnuo *WorkflowNodeUpdateOne) SetName(s string) *WorkflowNodeUpdateOne {
	wnuo.mutation.SetName(s)
	return wnuo
}

// SetType sets the "type" field.
func (wnuo *WorkflowNodeUpdateOne) SetType(i int) *WorkflowNodeUpdateOne {
	wnuo.mutation.ResetType()
	wnuo.mutation.SetType(i)
	return wnuo
}

// AddType adds i to the "type" field.
func (wnuo *WorkflowNodeUpdateOne) AddType(i int) *WorkflowNodeUpdateOne {
	wnuo.mutation.AddType(i)
	return wnuo
}

// SetDesc sets the "desc" field.
func (wnuo *WorkflowNodeUpdateOne) SetDesc(s string) *WorkflowNodeUpdateOne {
	wnuo.mutation.SetDesc(s)
	return wnuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (wnuo *WorkflowNodeUpdateOne) SetNillableDesc(s *string) *WorkflowNodeUpdateOne {
	if s != nil {
		wnuo.SetDesc(*s)
	}
	return wnuo
}

// ClearDesc clears the value of the "desc" field.
func (wnuo *WorkflowNodeUpdateOne) ClearDesc() *WorkflowNodeUpdateOne {
	wnuo.mutation.ClearDesc()
	return wnuo
}

// SetSeq sets the "seq" field.
func (wnuo *WorkflowNodeUpdateOne) SetSeq(i int) *WorkflowNodeUpdateOne {
	wnuo.mutation.ResetSeq()
	wnuo.mutation.SetSeq(i)
	return wnuo
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (wnuo *WorkflowNodeUpdateOne) SetNillableSeq(i *int) *WorkflowNodeUpdateOne {
	if i != nil {
		wnuo.SetSeq(*i)
	}
	return wnuo
}

// AddSeq adds i to the "seq" field.
func (wnuo *WorkflowNodeUpdateOne) AddSeq(i int) *WorkflowNodeUpdateOne {
	wnuo.mutation.AddSeq(i)
	return wnuo
}

// ClearSeq clears the value of the "seq" field.
func (wnuo *WorkflowNodeUpdateOne) ClearSeq() *WorkflowNodeUpdateOne {
	wnuo.mutation.ClearSeq()
	return wnuo
}

// AddTaskRecordIDs adds the "task_records" edge to the TaskRecord entity by IDs.
func (wnuo *WorkflowNodeUpdateOne) AddTaskRecordIDs(ids ...int) *WorkflowNodeUpdateOne {
	wnuo.mutation.AddTaskRecordIDs(ids...)
	return wnuo
}

// AddTaskRecords adds the "task_records" edges to the TaskRecord entity.
func (wnuo *WorkflowNodeUpdateOne) AddTaskRecords(t ...*TaskRecord) *WorkflowNodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wnuo.AddTaskRecordIDs(ids...)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wnuo *WorkflowNodeUpdateOne) SetWorkflowID(id int) *WorkflowNodeUpdateOne {
	wnuo.mutation.SetWorkflowID(id)
	return wnuo
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wnuo *WorkflowNodeUpdateOne) SetNillableWorkflowID(id *int) *WorkflowNodeUpdateOne {
	if id != nil {
		wnuo = wnuo.SetWorkflowID(*id)
	}
	return wnuo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wnuo *WorkflowNodeUpdateOne) SetWorkflow(w *Workflow) *WorkflowNodeUpdateOne {
	return wnuo.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (wnuo *WorkflowNodeUpdateOne) Mutation() *WorkflowNodeMutation {
	return wnuo.mutation
}

// ClearTaskRecords clears all "task_records" edges to the TaskRecord entity.
func (wnuo *WorkflowNodeUpdateOne) ClearTaskRecords() *WorkflowNodeUpdateOne {
	wnuo.mutation.ClearTaskRecords()
	return wnuo
}

// RemoveTaskRecordIDs removes the "task_records" edge to TaskRecord entities by IDs.
func (wnuo *WorkflowNodeUpdateOne) RemoveTaskRecordIDs(ids ...int) *WorkflowNodeUpdateOne {
	wnuo.mutation.RemoveTaskRecordIDs(ids...)
	return wnuo
}

// RemoveTaskRecords removes "task_records" edges to TaskRecord entities.
func (wnuo *WorkflowNodeUpdateOne) RemoveTaskRecords(t ...*TaskRecord) *WorkflowNodeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wnuo.RemoveTaskRecordIDs(ids...)
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wnuo *WorkflowNodeUpdateOne) ClearWorkflow() *WorkflowNodeUpdateOne {
	wnuo.mutation.ClearWorkflow()
	return wnuo
}

// Where appends a list predicates to the WorkflowNodeUpdate builder.
func (wnuo *WorkflowNodeUpdateOne) Where(ps ...predicate.WorkflowNode) *WorkflowNodeUpdateOne {
	wnuo.mutation.Where(ps...)
	return wnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wnuo *WorkflowNodeUpdateOne) Select(field string, fields ...string) *WorkflowNodeUpdateOne {
	wnuo.fields = append([]string{field}, fields...)
	return wnuo
}

// Save executes the query and returns the updated WorkflowNode entity.
func (wnuo *WorkflowNodeUpdateOne) Save(ctx context.Context) (*WorkflowNode, error) {
	return withHooks(ctx, wnuo.sqlSave, wnuo.mutation, wnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wnuo *WorkflowNodeUpdateOne) SaveX(ctx context.Context) *WorkflowNode {
	node, err := wnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wnuo *WorkflowNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := wnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnuo *WorkflowNodeUpdateOne) ExecX(ctx context.Context) {
	if err := wnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wnuo *WorkflowNodeUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowNode, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflownode.Table, workflownode.Columns, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeInt))
	id, ok := wnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflownode.FieldID)
		for _, f := range fields {
			if !workflownode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflownode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wnuo.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
	}
	if value, ok := wnuo.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeInt, value)
	}
	if value, ok := wnuo.mutation.AddedType(); ok {
		_spec.AddField(workflownode.FieldType, field.TypeInt, value)
	}
	if value, ok := wnuo.mutation.Desc(); ok {
		_spec.SetField(workflownode.FieldDesc, field.TypeString, value)
	}
	if wnuo.mutation.DescCleared() {
		_spec.ClearField(workflownode.FieldDesc, field.TypeString)
	}
	if value, ok := wnuo.mutation.Seq(); ok {
		_spec.SetField(workflownode.FieldSeq, field.TypeInt, value)
	}
	if value, ok := wnuo.mutation.AddedSeq(); ok {
		_spec.AddField(workflownode.FieldSeq, field.TypeInt, value)
	}
	if wnuo.mutation.SeqCleared() {
		_spec.ClearField(workflownode.FieldSeq, field.TypeInt)
	}
	if wnuo.mutation.TaskRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnuo.mutation.RemovedTaskRecordsIDs(); len(nodes) > 0 && !wnuo.mutation.TaskRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnuo.mutation.TaskRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wnuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.WorkflowTable,
			Columns: []string{workflownode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wnuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.WorkflowTable,
			Columns: []string{workflownode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowNode{config: wnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflownode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wnuo.mutation.done = true
	return _node, nil
}
