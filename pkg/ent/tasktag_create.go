// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/task"
	"subflow-core-go/pkg/ent/tasktag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskTagCreate is the builder for creating a TaskTag entity.
type TaskTagCreate struct {
	config
	mutation *TaskTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ttc *TaskTagCreate) SetName(s string) *TaskTagCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetDesc sets the "desc" field.
func (ttc *TaskTagCreate) SetDesc(s string) *TaskTagCreate {
	ttc.mutation.SetDesc(s)
	return ttc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ttc *TaskTagCreate) SetNillableDesc(s *string) *TaskTagCreate {
	if s != nil {
		ttc.SetDesc(*s)
	}
	return ttc
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ttc *TaskTagCreate) AddTaskIDs(ids ...int) *TaskTagCreate {
	ttc.mutation.AddTaskIDs(ids...)
	return ttc
}

// AddTask adds the "task" edges to the Task entity.
func (ttc *TaskTagCreate) AddTask(t ...*Task) *TaskTagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTaskIDs(ids...)
}

// Mutation returns the TaskTagMutation object of the builder.
func (ttc *TaskTagCreate) Mutation() *TaskTagMutation {
	return ttc.mutation
}

// Save creates the TaskTag in the database.
func (ttc *TaskTagCreate) Save(ctx context.Context) (*TaskTag, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TaskTagCreate) SaveX(ctx context.Context) *TaskTag {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TaskTagCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TaskTagCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TaskTagCreate) check() error {
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaskTag.name"`)}
	}
	if v, ok := ttc.mutation.Name(); ok {
		if err := tasktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskTag.name": %w`, err)}
		}
	}
	return nil
}

func (ttc *TaskTagCreate) sqlSave(ctx context.Context) (*TaskTag, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TaskTagCreate) createSpec() (*TaskTag, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskTag{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tasktag.Table, sqlgraph.NewFieldSpec(tasktag.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ttc.conflict
	if value, ok := ttc.mutation.Name(); ok {
		_spec.SetField(tasktag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ttc.mutation.Desc(); ok {
		_spec.SetField(tasktag.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if nodes := ttc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskTag.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ttc *TaskTagCreate) OnConflict(opts ...sql.ConflictOption) *TaskTagUpsertOne {
	ttc.conflict = opts
	return &TaskTagUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TaskTagCreate) OnConflictColumns(columns ...string) *TaskTagUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TaskTagUpsertOne{
		create: ttc,
	}
}

type (
	// TaskTagUpsertOne is the builder for "upsert"-ing
	//  one TaskTag node.
	TaskTagUpsertOne struct {
		create *TaskTagCreate
	}

	// TaskTagUpsert is the "OnConflict" setter.
	TaskTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TaskTagUpsert) SetName(v string) *TaskTagUpsert {
	u.Set(tasktag.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskTagUpsert) UpdateName() *TaskTagUpsert {
	u.SetExcluded(tasktag.FieldName)
	return u
}

// SetDesc sets the "desc" field.
func (u *TaskTagUpsert) SetDesc(v string) *TaskTagUpsert {
	u.Set(tasktag.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TaskTagUpsert) UpdateDesc() *TaskTagUpsert {
	u.SetExcluded(tasktag.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *TaskTagUpsert) ClearDesc() *TaskTagUpsert {
	u.SetNull(tasktag.FieldDesc)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskTagUpsertOne) UpdateNewValues() *TaskTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskTagUpsertOne) Ignore() *TaskTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskTagUpsertOne) DoNothing() *TaskTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskTagCreate.OnConflict
// documentation for more info.
func (u *TaskTagUpsertOne) Update(set func(*TaskTagUpsert)) *TaskTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskTagUpsertOne) SetName(v string) *TaskTagUpsertOne {
	return u.Update(func(s *TaskTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskTagUpsertOne) UpdateName() *TaskTagUpsertOne {
	return u.Update(func(s *TaskTagUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *TaskTagUpsertOne) SetDesc(v string) *TaskTagUpsertOne {
	return u.Update(func(s *TaskTagUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TaskTagUpsertOne) UpdateDesc() *TaskTagUpsertOne {
	return u.Update(func(s *TaskTagUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *TaskTagUpsertOne) ClearDesc() *TaskTagUpsertOne {
	return u.Update(func(s *TaskTagUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *TaskTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskTagUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskTagUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskTagCreateBulk is the builder for creating many TaskTag entities in bulk.
type TaskTagCreateBulk struct {
	config
	builders []*TaskTagCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskTag entities in the database.
func (ttcb *TaskTagCreateBulk) Save(ctx context.Context) ([]*TaskTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TaskTag, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TaskTagCreateBulk) SaveX(ctx context.Context) []*TaskTag {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TaskTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TaskTagCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TaskTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskTagUpsertBulk {
	ttcb.conflict = opts
	return &TaskTagUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TaskTagCreateBulk) OnConflictColumns(columns ...string) *TaskTagUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TaskTagUpsertBulk{
		create: ttcb,
	}
}

// TaskTagUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskTag nodes.
type TaskTagUpsertBulk struct {
	create *TaskTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskTagUpsertBulk) UpdateNewValues() *TaskTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskTagUpsertBulk) Ignore() *TaskTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskTagUpsertBulk) DoNothing() *TaskTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskTagCreateBulk.OnConflict
// documentation for more info.
func (u *TaskTagUpsertBulk) Update(set func(*TaskTagUpsert)) *TaskTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskTagUpsertBulk) SetName(v string) *TaskTagUpsertBulk {
	return u.Update(func(s *TaskTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskTagUpsertBulk) UpdateName() *TaskTagUpsertBulk {
	return u.Update(func(s *TaskTagUpsert) {
		s.UpdateName()
	})
}

// SetDesc sets the "desc" field.
func (u *TaskTagUpsertBulk) SetDesc(v string) *TaskTagUpsertBulk {
	return u.Update(func(s *TaskTagUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TaskTagUpsertBulk) UpdateDesc() *TaskTagUpsertBulk {
	return u.Update(func(s *TaskTagUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *TaskTagUpsertBulk) ClearDesc() *TaskTagUpsertBulk {
	return u.Update(func(s *TaskTagUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *TaskTagUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
