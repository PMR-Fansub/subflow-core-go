// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"subflow-core-go/pkg/ent/task"
	"subflow-core-go/pkg/ent/taskrecord"
	"subflow-core-go/pkg/ent/user"
	"subflow-core-go/pkg/ent/workflownode"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TaskRecord is the model entity for the TaskRecord schema.
type TaskRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// AssignedAt holds the value of the "assigned_at" field.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskRecordQuery when eager-loading is set.
	Edges                      TaskRecordEdges `json:"edges"`
	task_task_records          *int
	user_task_records          *int
	workflow_node_task_records *int
	selectValues               sql.SelectValues
}

// TaskRecordEdges holds the relations/edges for other nodes in the graph.
type TaskRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// WorkflowNode holds the value of the workflow_node edge.
	WorkflowNode *WorkflowNode `json:"workflow_node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskRecordEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// WorkflowNodeOrErr returns the WorkflowNode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskRecordEdges) WorkflowNodeOrErr() (*WorkflowNode, error) {
	if e.loadedTypes[2] {
		if e.WorkflowNode == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflownode.Label}
		}
		return e.WorkflowNode, nil
	}
	return nil, &NotLoadedError{edge: "workflow_node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskrecord.FieldID, taskrecord.FieldStatus:
			values[i] = new(sql.NullInt64)
		case taskrecord.FieldRemark:
			values[i] = new(sql.NullString)
		case taskrecord.FieldCreatedAt, taskrecord.FieldAssignedAt, taskrecord.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case taskrecord.ForeignKeys[0]: // task_task_records
			values[i] = new(sql.NullInt64)
		case taskrecord.ForeignKeys[1]: // user_task_records
			values[i] = new(sql.NullInt64)
		case taskrecord.ForeignKeys[2]: // workflow_node_task_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskRecord fields.
func (tr *TaskRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case taskrecord.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tr.Status = int(value.Int64)
			}
		case taskrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case taskrecord.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				tr.AssignedAt = value.Time
			}
		case taskrecord.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				tr.CompletedAt = value.Time
			}
		case taskrecord.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				tr.Remark = value.String
			}
		case taskrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_task_records", value)
			} else if value.Valid {
				tr.task_task_records = new(int)
				*tr.task_task_records = int(value.Int64)
			}
		case taskrecord.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_task_records", value)
			} else if value.Valid {
				tr.user_task_records = new(int)
				*tr.user_task_records = int(value.Int64)
			}
		case taskrecord.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workflow_node_task_records", value)
			} else if value.Valid {
				tr.workflow_node_task_records = new(int)
				*tr.workflow_node_task_records = int(value.Int64)
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskRecord.
// This includes values selected through modifiers, order, etc.
func (tr *TaskRecord) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TaskRecord entity.
func (tr *TaskRecord) QueryUser() *UserQuery {
	return NewTaskRecordClient(tr.config).QueryUser(tr)
}

// QueryTask queries the "task" edge of the TaskRecord entity.
func (tr *TaskRecord) QueryTask() *TaskQuery {
	return NewTaskRecordClient(tr.config).QueryTask(tr)
}

// QueryWorkflowNode queries the "workflow_node" edge of the TaskRecord entity.
func (tr *TaskRecord) QueryWorkflowNode() *WorkflowNodeQuery {
	return NewTaskRecordClient(tr.config).QueryWorkflowNode(tr)
}

// Update returns a builder for updating this TaskRecord.
// Note that you need to call TaskRecord.Unwrap() before calling this method if this TaskRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TaskRecord) Update() *TaskRecordUpdateOne {
	return NewTaskRecordClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TaskRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TaskRecord) Unwrap() *TaskRecord {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskRecord is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TaskRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TaskRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(tr.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(tr.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(tr.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// TaskRecords is a parsable slice of TaskRecord.
type TaskRecords []*TaskRecord
