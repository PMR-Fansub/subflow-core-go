// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/task"
	"subflow-core-go/pkg/ent/taskrecord"
	"subflow-core-go/pkg/ent/user"
	"subflow-core-go/pkg/ent/workflownode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskRecordCreate is the builder for creating a TaskRecord entity.
type TaskRecordCreate struct {
	config
	mutation *TaskRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (trc *TaskRecordCreate) SetStatus(i int) *TaskRecordCreate {
	trc.mutation.SetStatus(i)
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TaskRecordCreate) SetCreatedAt(t time.Time) *TaskRecordCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableCreatedAt(t *time.Time) *TaskRecordCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetAssignedAt sets the "assigned_at" field.
func (trc *TaskRecordCreate) SetAssignedAt(t time.Time) *TaskRecordCreate {
	trc.mutation.SetAssignedAt(t)
	return trc
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableAssignedAt(t *time.Time) *TaskRecordCreate {
	if t != nil {
		trc.SetAssignedAt(*t)
	}
	return trc
}

// SetCompletedAt sets the "completed_at" field.
func (trc *TaskRecordCreate) SetCompletedAt(t time.Time) *TaskRecordCreate {
	trc.mutation.SetCompletedAt(t)
	return trc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableCompletedAt(t *time.Time) *TaskRecordCreate {
	if t != nil {
		trc.SetCompletedAt(*t)
	}
	return trc
}

// SetRemark sets the "remark" field.
func (trc *TaskRecordCreate) SetRemark(s string) *TaskRecordCreate {
	trc.mutation.SetRemark(s)
	return trc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableRemark(s *string) *TaskRecordCreate {
	if s != nil {
		trc.SetRemark(*s)
	}
	return trc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (trc *TaskRecordCreate) SetUserID(id int) *TaskRecordCreate {
	trc.mutation.SetUserID(id)
	return trc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableUserID(id *int) *TaskRecordCreate {
	if id != nil {
		trc = trc.SetUserID(*id)
	}
	return trc
}

// SetUser sets the "user" edge to the User entity.
func (trc *TaskRecordCreate) SetUser(u *User) *TaskRecordCreate {
	return trc.SetUserID(u.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (trc *TaskRecordCreate) SetTaskID(id int) *TaskRecordCreate {
	trc.mutation.SetTaskID(id)
	return trc
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableTaskID(id *int) *TaskRecordCreate {
	if id != nil {
		trc = trc.SetTaskID(*id)
	}
	return trc
}

// SetTask sets the "task" edge to the Task entity.
func (trc *TaskRecordCreate) SetTask(t *Task) *TaskRecordCreate {
	return trc.SetTaskID(t.ID)
}

// SetWorkflowNodeID sets the "workflow_node" edge to the WorkflowNode entity by ID.
func (trc *TaskRecordCreate) SetWorkflowNodeID(id int) *TaskRecordCreate {
	trc.mutation.SetWorkflowNodeID(id)
	return trc
}

// SetNillableWorkflowNodeID sets the "workflow_node" edge to the WorkflowNode entity by ID if the given value is not nil.
func (trc *TaskRecordCreate) SetNillableWorkflowNodeID(id *int) *TaskRecordCreate {
	if id != nil {
		trc = trc.SetWorkflowNodeID(*id)
	}
	return trc
}

// SetWorkflowNode sets the "workflow_node" edge to the WorkflowNode entity.
func (trc *TaskRecordCreate) SetWorkflowNode(w *WorkflowNode) *TaskRecordCreate {
	return trc.SetWorkflowNodeID(w.ID)
}

// Mutation returns the TaskRecordMutation object of the builder.
func (trc *TaskRecordCreate) Mutation() *TaskRecordMutation {
	return trc.mutation
}

// Save creates the TaskRecord in the database.
func (trc *TaskRecordCreate) Save(ctx context.Context) (*TaskRecord, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaskRecordCreate) SaveX(ctx context.Context) *TaskRecord {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TaskRecordCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TaskRecordCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TaskRecordCreate) defaults() {
	if _, ok := trc.mutation.CreatedAt(); !ok {
		v := taskrecord.DefaultCreatedAt
		trc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TaskRecordCreate) check() error {
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaskRecord.status"`)}
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskRecord.created_at"`)}
	}
	return nil
}

func (trc *TaskRecordCreate) sqlSave(ctx context.Context) (*TaskRecord, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TaskRecordCreate) createSpec() (*TaskRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskRecord{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(taskrecord.Table, sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(taskrecord.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(taskrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.AssignedAt(); ok {
		_spec.SetField(taskrecord.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := trc.mutation.CompletedAt(); ok {
		_spec.SetField(taskrecord.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := trc.mutation.Remark(); ok {
		_spec.SetField(taskrecord.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := trc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskrecord.UserTable,
			Columns: []string{taskrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_task_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskrecord.TaskTable,
			Columns: []string{taskrecord.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_task_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.WorkflowNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskrecord.WorkflowNodeTable,
			Columns: []string{taskrecord.WorkflowNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_node_task_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskRecord.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskRecordUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (trc *TaskRecordCreate) OnConflict(opts ...sql.ConflictOption) *TaskRecordUpsertOne {
	trc.conflict = opts
	return &TaskRecordUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TaskRecordCreate) OnConflictColumns(columns ...string) *TaskRecordUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TaskRecordUpsertOne{
		create: trc,
	}
}

type (
	// TaskRecordUpsertOne is the builder for "upsert"-ing
	//  one TaskRecord node.
	TaskRecordUpsertOne struct {
		create *TaskRecordCreate
	}

	// TaskRecordUpsert is the "OnConflict" setter.
	TaskRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *TaskRecordUpsert) SetStatus(v int) *TaskRecordUpsert {
	u.Set(taskrecord.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskRecordUpsert) UpdateStatus() *TaskRecordUpsert {
	u.SetExcluded(taskrecord.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TaskRecordUpsert) AddStatus(v int) *TaskRecordUpsert {
	u.Add(taskrecord.FieldStatus, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskRecordUpsert) SetCreatedAt(v time.Time) *TaskRecordUpsert {
	u.Set(taskrecord.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskRecordUpsert) UpdateCreatedAt() *TaskRecordUpsert {
	u.SetExcluded(taskrecord.FieldCreatedAt)
	return u
}

// SetAssignedAt sets the "assigned_at" field.
func (u *TaskRecordUpsert) SetAssignedAt(v time.Time) *TaskRecordUpsert {
	u.Set(taskrecord.FieldAssignedAt, v)
	return u
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *TaskRecordUpsert) UpdateAssignedAt() *TaskRecordUpsert {
	u.SetExcluded(taskrecord.FieldAssignedAt)
	return u
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *TaskRecordUpsert) ClearAssignedAt() *TaskRecordUpsert {
	u.SetNull(taskrecord.FieldAssignedAt)
	return u
}

// SetCompletedAt sets the "completed_at" field.
func (u *TaskRecordUpsert) SetCompletedAt(v time.Time) *TaskRecordUpsert {
	u.Set(taskrecord.FieldCompletedAt, v)
	return u
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *TaskRecordUpsert) UpdateCompletedAt() *TaskRecordUpsert {
	u.SetExcluded(taskrecord.FieldCompletedAt)
	return u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *TaskRecordUpsert) ClearCompletedAt() *TaskRecordUpsert {
	u.SetNull(taskrecord.FieldCompletedAt)
	return u
}

// SetRemark sets the "remark" field.
func (u *TaskRecordUpsert) SetRemark(v string) *TaskRecordUpsert {
	u.Set(taskrecord.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskRecordUpsert) UpdateRemark() *TaskRecordUpsert {
	u.SetExcluded(taskrecord.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskRecordUpsert) ClearRemark() *TaskRecordUpsert {
	u.SetNull(taskrecord.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskRecordUpsertOne) UpdateNewValues() *TaskRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskRecordUpsertOne) Ignore() *TaskRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskRecordUpsertOne) DoNothing() *TaskRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskRecordCreate.OnConflict
// documentation for more info.
func (u *TaskRecordUpsertOne) Update(set func(*TaskRecordUpsert)) *TaskRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *TaskRecordUpsertOne) SetStatus(v int) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TaskRecordUpsertOne) AddStatus(v int) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskRecordUpsertOne) UpdateStatus() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskRecordUpsertOne) SetCreatedAt(v time.Time) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskRecordUpsertOne) UpdateCreatedAt() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *TaskRecordUpsertOne) SetAssignedAt(v time.Time) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *TaskRecordUpsertOne) UpdateAssignedAt() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateAssignedAt()
	})
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *TaskRecordUpsertOne) ClearAssignedAt() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearAssignedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *TaskRecordUpsertOne) SetCompletedAt(v time.Time) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *TaskRecordUpsertOne) UpdateCompletedAt() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *TaskRecordUpsertOne) ClearCompletedAt() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearCompletedAt()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskRecordUpsertOne) SetRemark(v string) *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskRecordUpsertOne) UpdateRemark() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskRecordUpsertOne) ClearRemark() *TaskRecordUpsertOne {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TaskRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskRecordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskRecordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskRecordCreateBulk is the builder for creating many TaskRecord entities in bulk.
type TaskRecordCreateBulk struct {
	config
	builders []*TaskRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskRecord entities in the database.
func (trcb *TaskRecordCreateBulk) Save(ctx context.Context) ([]*TaskRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TaskRecord, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TaskRecordCreateBulk) SaveX(ctx context.Context) []*TaskRecord {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TaskRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TaskRecordCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskRecordUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (trcb *TaskRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskRecordUpsertBulk {
	trcb.conflict = opts
	return &TaskRecordUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TaskRecordCreateBulk) OnConflictColumns(columns ...string) *TaskRecordUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TaskRecordUpsertBulk{
		create: trcb,
	}
}

// TaskRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskRecord nodes.
type TaskRecordUpsertBulk struct {
	create *TaskRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskRecordUpsertBulk) UpdateNewValues() *TaskRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskRecordUpsertBulk) Ignore() *TaskRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskRecordUpsertBulk) DoNothing() *TaskRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskRecordCreateBulk.OnConflict
// documentation for more info.
func (u *TaskRecordUpsertBulk) Update(set func(*TaskRecordUpsert)) *TaskRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *TaskRecordUpsertBulk) SetStatus(v int) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TaskRecordUpsertBulk) AddStatus(v int) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskRecordUpsertBulk) UpdateStatus() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskRecordUpsertBulk) SetCreatedAt(v time.Time) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskRecordUpsertBulk) UpdateCreatedAt() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAssignedAt sets the "assigned_at" field.
func (u *TaskRecordUpsertBulk) SetAssignedAt(v time.Time) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetAssignedAt(v)
	})
}

// UpdateAssignedAt sets the "assigned_at" field to the value that was provided on create.
func (u *TaskRecordUpsertBulk) UpdateAssignedAt() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateAssignedAt()
	})
}

// ClearAssignedAt clears the value of the "assigned_at" field.
func (u *TaskRecordUpsertBulk) ClearAssignedAt() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearAssignedAt()
	})
}

// SetCompletedAt sets the "completed_at" field.
func (u *TaskRecordUpsertBulk) SetCompletedAt(v time.Time) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetCompletedAt(v)
	})
}

// UpdateCompletedAt sets the "completed_at" field to the value that was provided on create.
func (u *TaskRecordUpsertBulk) UpdateCompletedAt() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateCompletedAt()
	})
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (u *TaskRecordUpsertBulk) ClearCompletedAt() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearCompletedAt()
	})
}

// SetRemark sets the "remark" field.
func (u *TaskRecordUpsertBulk) SetRemark(v string) *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TaskRecordUpsertBulk) UpdateRemark() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TaskRecordUpsertBulk) ClearRemark() *TaskRecordUpsertBulk {
	return u.Update(func(s *TaskRecordUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TaskRecordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
