// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/taskrecord"
	"subflow-core-go/pkg/ent/workflow"
	"subflow-core-go/pkg/ent/workflownode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowNodeCreate is the builder for creating a WorkflowNode entity.
type WorkflowNodeCreate struct {
	config
	mutation *WorkflowNodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (wnc *WorkflowNodeCreate) SetName(s string) *WorkflowNodeCreate {
	wnc.mutation.SetName(s)
	return wnc
}

// SetType sets the "type" field.
func (wnc *WorkflowNodeCreate) SetType(i int) *WorkflowNodeCreate {
	wnc.mutation.SetType(i)
	return wnc
}

// SetDesc sets the "desc" field.
func (wnc *WorkflowNodeCreate) SetDesc(s string) *WorkflowNodeCreate {
	wnc.mutation.SetDesc(s)
	return wnc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (wnc *WorkflowNodeCreate) SetNillableDesc(s *string) *WorkflowNodeCreate {
	if s != nil {
		wnc.SetDesc(*s)
	}
	return wnc
}

// SetSeq sets the "seq" field.
func (wnc *WorkflowNodeCreate) SetSeq(i int) *WorkflowNodeCreate {
	wnc.mutation.SetSeq(i)
	return wnc
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (wnc *WorkflowNodeCreate) SetNillableSeq(i *int) *WorkflowNodeCreate {
	if i != nil {
		wnc.SetSeq(*i)
	}
	return wnc
}

// AddTaskRecordIDs adds the "task_records" edge to the TaskRecord entity by IDs.
func (wnc *WorkflowNodeCreate) AddTaskRecordIDs(ids ...int) *WorkflowNodeCreate {
	wnc.mutation.AddTaskRecordIDs(ids...)
	return wnc
}

// AddTaskRecords adds the "task_records" edges to the TaskRecord entity.
func (wnc *WorkflowNodeCreate) AddTaskRecords(t ...*TaskRecord) *WorkflowNodeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wnc.AddTaskRecordIDs(ids...)
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wnc *WorkflowNodeCreate) SetWorkflowID(id int) *WorkflowNodeCreate {
	wnc.mutation.SetWorkflowID(id)
	return wnc
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wnc *WorkflowNodeCreate) SetNillableWorkflowID(id *int) *WorkflowNodeCreate {
	if id != nil {
		wnc = wnc.SetWorkflowID(*id)
	}
	return wnc
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wnc *WorkflowNodeCreate) SetWorkflow(w *Workflow) *WorkflowNodeCreate {
	return wnc.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowNodeMutation object of the builder.
func (wnc *WorkflowNodeCreate) Mutation() *WorkflowNodeMutation {
	return wnc.mutation
}

// Save creates the WorkflowNode in the database.
func (wnc *WorkflowNodeCreate) Save(ctx context.Context) (*WorkflowNode, error) {
	return withHooks(ctx, wnc.sqlSave, wnc.mutation, wnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wnc *WorkflowNodeCreate) SaveX(ctx context.Context) *WorkflowNode {
	v, err := wnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wnc *WorkflowNodeCreate) Exec(ctx context.Context) error {
	_, err := wnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wnc *WorkflowNodeCreate) ExecX(ctx context.Context) {
	if err := wnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wnc *WorkflowNodeCreate) check() error {
	if _, ok := wnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WorkflowNode.name"`)}
	}
	if _, ok := wnc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WorkflowNode.type"`)}
	}
	return nil
}

func (wnc *WorkflowNodeCreate) sqlSave(ctx context.Context) (*WorkflowNode, error) {
	if err := wnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wnc.mutation.id = &_node.ID
	wnc.mutation.done = true
	return _node, nil
}

func (wnc *WorkflowNodeCreate) createSpec() (*WorkflowNode, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowNode{config: wnc.config}
		_spec = sqlgraph.NewCreateSpec(workflownode.Table, sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wnc.conflict
	if value, ok := wnc.mutation.Name(); ok {
		_spec.SetField(workflownode.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wnc.mutation.GetType(); ok {
		_spec.SetField(workflownode.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := wnc.mutation.Desc(); ok {
		_spec.SetField(workflownode.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := wnc.mutation.Seq(); ok {
		_spec.SetField(workflownode.FieldSeq, field.TypeInt, value)
		_node.Seq = value
	}
	if nodes := wnc.mutation.TaskRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflownode.TaskRecordsTable,
			Columns: []string{workflownode.TaskRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wnc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflownode.WorkflowTable,
			Columns: []string{workflownode.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_workflow_nodes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowNode.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowNodeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wnc *WorkflowNodeCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowNodeUpsertOne {
	wnc.conflict = opts
	return &WorkflowNodeUpsertOne{
		create: wnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wnc *WorkflowNodeCreate) OnConflictColumns(columns ...string) *WorkflowNodeUpsertOne {
	wnc.conflict = append(wnc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowNodeUpsertOne{
		create: wnc,
	}
}

type (
	// WorkflowNodeUpsertOne is the builder for "upsert"-ing
	//  one WorkflowNode node.
	WorkflowNodeUpsertOne struct {
		create *WorkflowNodeCreate
	}

	// WorkflowNodeUpsert is the "OnConflict" setter.
	WorkflowNodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *WorkflowNodeUpsert) SetName(v string) *WorkflowNodeUpsert {
	u.Set(workflownode.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowNodeUpsert) UpdateName() *WorkflowNodeUpsert {
	u.SetExcluded(workflownode.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *WorkflowNodeUpsert) SetType(v int) *WorkflowNodeUpsert {
	u.Set(workflownode.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowNodeUpsert) UpdateType() *WorkflowNodeUpsert {
	u.SetExcluded(workflownode.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *WorkflowNodeUpsert) AddType(v int) *WorkflowNodeUpsert {
	u.Add(workflownode.FieldType, v)
	return u
}

// SetDesc sets the "desc" field.
func (u *WorkflowNodeUpsert) SetDesc(v string) *WorkflowNodeUpsert {
	u.Set(workflownode.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowNodeUpsert) UpdateDesc() *WorkflowNodeUpsert {
	u.SetExcluded(workflownode.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowNodeUpsert) ClearDesc() *WorkflowNodeUpsert {
	u.SetNull(workflownode.FieldDesc)
	return u
}

// SetSeq sets the "seq" field.
func (u *WorkflowNodeUpsert) SetSeq(v int) *WorkflowNodeUpsert {
	u.Set(workflownode.FieldSeq, v)
	return u
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *WorkflowNodeUpsert) UpdateSeq() *WorkflowNodeUpsert {
	u.SetExcluded(workflownode.FieldSeq)
	return u
}

// AddSeq adds v to the "seq" field.
func (u *WorkflowNodeUpsert) AddSeq(v int) *WorkflowNodeUpsert {
	u.Add(workflownode.FieldSeq, v)
	return u
}

// ClearSeq clears the value of the "seq" field.
func (u *WorkflowNodeUpsert) ClearSeq() *WorkflowNodeUpsert {
	u.SetNull(workflownode.FieldSeq)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkflowNodeUpsertOne) UpdateNewValues() *WorkflowNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowNodeUpsertOne) Ignore() *WorkflowNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowNodeUpsertOne) DoNothing() *WorkflowNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowNodeCreate.OnConflict
// documentation for more info.
func (u *WorkflowNodeUpsertOne) Update(set func(*WorkflowNodeUpsert)) *WorkflowNodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowNodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WorkflowNodeUpsertOne) SetName(v string) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowNodeUpsertOne) UpdateName() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkflowNodeUpsertOne) SetType(v int) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkflowNodeUpsertOne) AddType(v int) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowNodeUpsertOne) UpdateType() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *WorkflowNodeUpsertOne) SetDesc(v string) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowNodeUpsertOne) UpdateDesc() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowNodeUpsertOne) ClearDesc() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.ClearDesc()
	})
}

// SetSeq sets the "seq" field.
func (u *WorkflowNodeUpsertOne) SetSeq(v int) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetSeq(v)
	})
}

// AddSeq adds v to the "seq" field.
func (u *WorkflowNodeUpsertOne) AddSeq(v int) *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.AddSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *WorkflowNodeUpsertOne) UpdateSeq() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateSeq()
	})
}

// ClearSeq clears the value of the "seq" field.
func (u *WorkflowNodeUpsertOne) ClearSeq() *WorkflowNodeUpsertOne {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.ClearSeq()
	})
}

// Exec executes the query.
func (u *WorkflowNodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkflowNodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowNodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowNodeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowNodeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowNodeCreateBulk is the builder for creating many WorkflowNode entities in bulk.
type WorkflowNodeCreateBulk struct {
	config
	builders []*WorkflowNodeCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkflowNode entities in the database.
func (wncb *WorkflowNodeCreateBulk) Save(ctx context.Context) ([]*WorkflowNode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wncb.builders))
	nodes := make([]*WorkflowNode, len(wncb.builders))
	mutators := make([]Mutator, len(wncb.builders))
	for i := range wncb.builders {
		func(i int, root context.Context) {
			builder := wncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wncb *WorkflowNodeCreateBulk) SaveX(ctx context.Context) []*WorkflowNode {
	v, err := wncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wncb *WorkflowNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := wncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wncb *WorkflowNodeCreateBulk) ExecX(ctx context.Context) {
	if err := wncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowNode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowNodeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wncb *WorkflowNodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowNodeUpsertBulk {
	wncb.conflict = opts
	return &WorkflowNodeUpsertBulk{
		create: wncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wncb *WorkflowNodeCreateBulk) OnConflictColumns(columns ...string) *WorkflowNodeUpsertBulk {
	wncb.conflict = append(wncb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowNodeUpsertBulk{
		create: wncb,
	}
}

// WorkflowNodeUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowNode nodes.
type WorkflowNodeUpsertBulk struct {
	create *WorkflowNodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkflowNodeUpsertBulk) UpdateNewValues() *WorkflowNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowNode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowNodeUpsertBulk) Ignore() *WorkflowNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowNodeUpsertBulk) DoNothing() *WorkflowNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowNodeCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowNodeUpsertBulk) Update(set func(*WorkflowNodeUpsert)) *WorkflowNodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowNodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WorkflowNodeUpsertBulk) SetName(v string) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowNodeUpsertBulk) UpdateName() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkflowNodeUpsertBulk) SetType(v int) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkflowNodeUpsertBulk) AddType(v int) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowNodeUpsertBulk) UpdateType() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *WorkflowNodeUpsertBulk) SetDesc(v string) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowNodeUpsertBulk) UpdateDesc() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowNodeUpsertBulk) ClearDesc() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.ClearDesc()
	})
}

// SetSeq sets the "seq" field.
func (u *WorkflowNodeUpsertBulk) SetSeq(v int) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.SetSeq(v)
	})
}

// AddSeq adds v to the "seq" field.
func (u *WorkflowNodeUpsertBulk) AddSeq(v int) *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.AddSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *WorkflowNodeUpsertBulk) UpdateSeq() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.UpdateSeq()
	})
}

// ClearSeq clears the value of the "seq" field.
func (u *WorkflowNodeUpsertBulk) ClearSeq() *WorkflowNodeUpsertBulk {
	return u.Update(func(s *WorkflowNodeUpsert) {
		s.ClearSeq()
	})
}

// Exec executes the query.
func (u *WorkflowNodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkflowNodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkflowNodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowNodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
