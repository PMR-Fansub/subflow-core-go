// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/task"
	"subflow-core-go/pkg/ent/workflow"
	"subflow-core-go/pkg/ent/workflownode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowCreate is the builder for creating a Workflow entity.
type WorkflowCreate struct {
	config
	mutation *WorkflowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (wc *WorkflowCreate) SetName(s string) *WorkflowCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetType sets the "type" field.
func (wc *WorkflowCreate) SetType(i int) *WorkflowCreate {
	wc.mutation.SetType(i)
	return wc
}

// SetDesc sets the "desc" field.
func (wc *WorkflowCreate) SetDesc(s string) *WorkflowCreate {
	wc.mutation.SetDesc(s)
	return wc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (wc *WorkflowCreate) SetNillableDesc(s *string) *WorkflowCreate {
	if s != nil {
		wc.SetDesc(*s)
	}
	return wc
}

// AddWorkflowNodeIDs adds the "workflow_nodes" edge to the WorkflowNode entity by IDs.
func (wc *WorkflowCreate) AddWorkflowNodeIDs(ids ...int) *WorkflowCreate {
	wc.mutation.AddWorkflowNodeIDs(ids...)
	return wc
}

// AddWorkflowNodes adds the "workflow_nodes" edges to the WorkflowNode entity.
func (wc *WorkflowCreate) AddWorkflowNodes(w ...*WorkflowNode) *WorkflowCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkflowNodeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (wc *WorkflowCreate) AddTaskIDs(ids ...int) *WorkflowCreate {
	wc.mutation.AddTaskIDs(ids...)
	return wc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (wc *WorkflowCreate) AddTasks(t ...*Task) *WorkflowCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wc.AddTaskIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wc *WorkflowCreate) Mutation() *WorkflowMutation {
	return wc.mutation
}

// Save creates the Workflow in the database.
func (wc *WorkflowCreate) Save(ctx context.Context) (*Workflow, error) {
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkflowCreate) SaveX(ctx context.Context) *Workflow {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkflowCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkflowCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkflowCreate) check() error {
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Workflow.name"`)}
	}
	if _, ok := wc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Workflow.type"`)}
	}
	return nil
}

func (wc *WorkflowCreate) sqlSave(ctx context.Context) (*Workflow, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkflowCreate) createSpec() (*Workflow, *sqlgraph.CreateSpec) {
	var (
		_node = &Workflow{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workflow.Table, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := wc.mutation.Desc(); ok {
		_spec.SetField(workflow.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if nodes := wc.mutation.WorkflowNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.WorkflowNodesTable,
			Columns: []string{workflow.WorkflowNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflownode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.TasksTable,
			Columns: []string{workflow.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workflow.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wc *WorkflowCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowUpsertOne {
	wc.conflict = opts
	return &WorkflowUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WorkflowCreate) OnConflictColumns(columns ...string) *WorkflowUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowUpsertOne{
		create: wc,
	}
}

type (
	// WorkflowUpsertOne is the builder for "upsert"-ing
	//  one Workflow node.
	WorkflowUpsertOne struct {
		create *WorkflowCreate
	}

	// WorkflowUpsert is the "OnConflict" setter.
	WorkflowUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *WorkflowUpsert) SetName(v string) *WorkflowUpsert {
	u.Set(workflow.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateName() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *WorkflowUpsert) SetType(v int) *WorkflowUpsert {
	u.Set(workflow.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateType() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *WorkflowUpsert) AddType(v int) *WorkflowUpsert {
	u.Add(workflow.FieldType, v)
	return u
}

// SetDesc sets the "desc" field.
func (u *WorkflowUpsert) SetDesc(v string) *WorkflowUpsert {
	u.Set(workflow.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowUpsert) UpdateDesc() *WorkflowUpsert {
	u.SetExcluded(workflow.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowUpsert) ClearDesc() *WorkflowUpsert {
	u.SetNull(workflow.FieldDesc)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkflowUpsertOne) UpdateNewValues() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowUpsertOne) Ignore() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowUpsertOne) DoNothing() *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowCreate.OnConflict
// documentation for more info.
func (u *WorkflowUpsertOne) Update(set func(*WorkflowUpsert)) *WorkflowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WorkflowUpsertOne) SetName(v string) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateName() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkflowUpsertOne) SetType(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkflowUpsertOne) AddType(v int) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateType() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *WorkflowUpsertOne) SetDesc(v string) *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowUpsertOne) UpdateDesc() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowUpsertOne) ClearDesc() *WorkflowUpsertOne {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *WorkflowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkflowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowCreateBulk is the builder for creating many Workflow entities in bulk.
type WorkflowCreateBulk struct {
	config
	builders []*WorkflowCreate
	conflict []sql.ConflictOption
}

// Save creates the Workflow entities in the database.
func (wcb *WorkflowCreateBulk) Save(ctx context.Context) ([]*Workflow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workflow, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) SaveX(ctx context.Context) []*Workflow {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkflowCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkflowCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workflow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wcb *WorkflowCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowUpsertBulk {
	wcb.conflict = opts
	return &WorkflowUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WorkflowCreateBulk) OnConflictColumns(columns ...string) *WorkflowUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowUpsertBulk{
		create: wcb,
	}
}

// WorkflowUpsertBulk is the builder for "upsert"-ing
// a bulk of Workflow nodes.
type WorkflowUpsertBulk struct {
	create *WorkflowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkflowUpsertBulk) UpdateNewValues() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workflow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowUpsertBulk) Ignore() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowUpsertBulk) DoNothing() *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowUpsertBulk) Update(set func(*WorkflowUpsert)) *WorkflowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *WorkflowUpsertBulk) SetName(v string) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateName() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkflowUpsertBulk) SetType(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkflowUpsertBulk) AddType(v int) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateType() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *WorkflowUpsertBulk) SetDesc(v string) *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *WorkflowUpsertBulk) UpdateDesc() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *WorkflowUpsertBulk) ClearDesc() *WorkflowUpsertBulk {
	return u.Update(func(s *WorkflowUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *WorkflowUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkflowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkflowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
