// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/predicate"
	"subflow-core-go/pkg/ent/task"
	"subflow-core-go/pkg/ent/tasktag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskTagUpdate is the builder for updating TaskTag entities.
type TaskTagUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTagMutation
}

// Where appends a list predicates to the TaskTagUpdate builder.
func (ttu *TaskTagUpdate) Where(ps ...predicate.TaskTag) *TaskTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "name" field.
func (ttu *TaskTagUpdate) SetName(s string) *TaskTagUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetDesc sets the "desc" field.
func (ttu *TaskTagUpdate) SetDesc(s string) *TaskTagUpdate {
	ttu.mutation.SetDesc(s)
	return ttu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ttu *TaskTagUpdate) SetNillableDesc(s *string) *TaskTagUpdate {
	if s != nil {
		ttu.SetDesc(*s)
	}
	return ttu
}

// ClearDesc clears the value of the "desc" field.
func (ttu *TaskTagUpdate) ClearDesc() *TaskTagUpdate {
	ttu.mutation.ClearDesc()
	return ttu
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ttu *TaskTagUpdate) AddTaskIDs(ids ...int) *TaskTagUpdate {
	ttu.mutation.AddTaskIDs(ids...)
	return ttu
}

// AddTask adds the "task" edges to the Task entity.
func (ttu *TaskTagUpdate) AddTask(t ...*Task) *TaskTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTaskIDs(ids...)
}

// Mutation returns the TaskTagMutation object of the builder.
func (ttu *TaskTagUpdate) Mutation() *TaskTagMutation {
	return ttu.mutation
}

// ClearTask clears all "task" edges to the Task entity.
func (ttu *TaskTagUpdate) ClearTask() *TaskTagUpdate {
	ttu.mutation.ClearTask()
	return ttu
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (ttu *TaskTagUpdate) RemoveTaskIDs(ids ...int) *TaskTagUpdate {
	ttu.mutation.RemoveTaskIDs(ids...)
	return ttu
}

// RemoveTask removes "task" edges to Task entities.
func (ttu *TaskTagUpdate) RemoveTask(t ...*Task) *TaskTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TaskTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TaskTagUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := tasktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskTag.name": %w`, err)}
		}
	}
	return nil
}

func (ttu *TaskTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tasktag.Table, tasktag.Columns, sqlgraph.NewFieldSpec(tasktag.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tasktag.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Desc(); ok {
		_spec.SetField(tasktag.FieldDesc, field.TypeString, value)
	}
	if ttu.mutation.DescCleared() {
		_spec.ClearField(tasktag.FieldDesc, field.TypeString)
	}
	if ttu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !ttu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TaskTagUpdateOne is the builder for updating a single TaskTag entity.
type TaskTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTagMutation
}

// SetName sets the "name" field.
func (ttuo *TaskTagUpdateOne) SetName(s string) *TaskTagUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetDesc sets the "desc" field.
func (ttuo *TaskTagUpdateOne) SetDesc(s string) *TaskTagUpdateOne {
	ttuo.mutation.SetDesc(s)
	return ttuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ttuo *TaskTagUpdateOne) SetNillableDesc(s *string) *TaskTagUpdateOne {
	if s != nil {
		ttuo.SetDesc(*s)
	}
	return ttuo
}

// ClearDesc clears the value of the "desc" field.
func (ttuo *TaskTagUpdateOne) ClearDesc() *TaskTagUpdateOne {
	ttuo.mutation.ClearDesc()
	return ttuo
}

// AddTaskIDs adds the "task" edge to the Task entity by IDs.
func (ttuo *TaskTagUpdateOne) AddTaskIDs(ids ...int) *TaskTagUpdateOne {
	ttuo.mutation.AddTaskIDs(ids...)
	return ttuo
}

// AddTask adds the "task" edges to the Task entity.
func (ttuo *TaskTagUpdateOne) AddTask(t ...*Task) *TaskTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTaskIDs(ids...)
}

// Mutation returns the TaskTagMutation object of the builder.
func (ttuo *TaskTagUpdateOne) Mutation() *TaskTagMutation {
	return ttuo.mutation
}

// ClearTask clears all "task" edges to the Task entity.
func (ttuo *TaskTagUpdateOne) ClearTask() *TaskTagUpdateOne {
	ttuo.mutation.ClearTask()
	return ttuo
}

// RemoveTaskIDs removes the "task" edge to Task entities by IDs.
func (ttuo *TaskTagUpdateOne) RemoveTaskIDs(ids ...int) *TaskTagUpdateOne {
	ttuo.mutation.RemoveTaskIDs(ids...)
	return ttuo
}

// RemoveTask removes "task" edges to Task entities.
func (ttuo *TaskTagUpdateOne) RemoveTask(t ...*Task) *TaskTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the TaskTagUpdate builder.
func (ttuo *TaskTagUpdateOne) Where(ps ...predicate.TaskTag) *TaskTagUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TaskTagUpdateOne) Select(field string, fields ...string) *TaskTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TaskTag entity.
func (ttuo *TaskTagUpdateOne) Save(ctx context.Context) (*TaskTag, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTagUpdateOne) SaveX(ctx context.Context) *TaskTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TaskTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TaskTagUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := tasktag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskTag.name": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TaskTagUpdateOne) sqlSave(ctx context.Context) (_node *TaskTag, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tasktag.Table, tasktag.Columns, sqlgraph.NewFieldSpec(tasktag.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktag.FieldID)
		for _, f := range fields {
			if !tasktag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tasktag.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Desc(); ok {
		_spec.SetField(tasktag.FieldDesc, field.TypeString, value)
	}
	if ttuo.mutation.DescCleared() {
		_spec.ClearField(tasktag.FieldDesc, field.TypeString)
	}
	if ttuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !ttuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tasktag.TaskTable,
			Columns: tasktag.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
