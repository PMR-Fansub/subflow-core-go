// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"subflow-core-go/pkg/ent/team"
	"subflow-core-go/pkg/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamCreate is the builder for creating a Team entity.
type TeamCreate struct {
	config
	mutation *TeamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TeamCreate) SetName(s string) *TeamCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TeamCreate) SetStatus(i int) *TeamCreate {
	tc.mutation.SetStatus(i)
	return tc
}

// SetQqGroup sets the "qq_group" field.
func (tc *TeamCreate) SetQqGroup(s string) *TeamCreate {
	tc.mutation.SetQqGroup(s)
	return tc
}

// SetNillableQqGroup sets the "qq_group" field if the given value is not nil.
func (tc *TeamCreate) SetNillableQqGroup(s *string) *TeamCreate {
	if s != nil {
		tc.SetQqGroup(*s)
	}
	return tc
}

// SetLogo sets the "logo" field.
func (tc *TeamCreate) SetLogo(s string) *TeamCreate {
	tc.mutation.SetLogo(s)
	return tc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (tc *TeamCreate) SetNillableLogo(s *string) *TeamCreate {
	if s != nil {
		tc.SetLogo(*s)
	}
	return tc
}

// SetDesc sets the "desc" field.
func (tc *TeamCreate) SetDesc(s string) *TeamCreate {
	tc.mutation.SetDesc(s)
	return tc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (tc *TeamCreate) SetNillableDesc(s *string) *TeamCreate {
	if s != nil {
		tc.SetDesc(*s)
	}
	return tc
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (tc *TeamCreate) AddMemberIDs(ids ...int) *TeamCreate {
	tc.mutation.AddMemberIDs(ids...)
	return tc
}

// AddMembers adds the "members" edges to the User entity.
func (tc *TeamCreate) AddMembers(u ...*User) *TeamCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddMemberIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tc *TeamCreate) Mutation() *TeamMutation {
	return tc.mutation
}

// Save creates the Team in the database.
func (tc *TeamCreate) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeamCreate) SaveX(ctx context.Context) *Team {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeamCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeamCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeamCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Team.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := team.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Team.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Team.status"`)}
	}
	return nil
}

func (tc *TeamCreate) sqlSave(ctx context.Context) (*Team, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TeamCreate) createSpec() (*Team, *sqlgraph.CreateSpec) {
	var (
		_node = &Team{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(team.Table, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(team.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.QqGroup(); ok {
		_spec.SetField(team.FieldQqGroup, field.TypeString, value)
		_node.QqGroup = value
	}
	if value, ok := tc.mutation.Logo(); ok {
		_spec.SetField(team.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := tc.mutation.Desc(); ok {
		_spec.SetField(team.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if nodes := tc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.MembersTable,
			Columns: team.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Team.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TeamCreate) OnConflict(opts ...sql.ConflictOption) *TeamUpsertOne {
	tc.conflict = opts
	return &TeamUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TeamCreate) OnConflictColumns(columns ...string) *TeamUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TeamUpsertOne{
		create: tc,
	}
}

type (
	// TeamUpsertOne is the builder for "upsert"-ing
	//  one Team node.
	TeamUpsertOne struct {
		create *TeamCreate
	}

	// TeamUpsert is the "OnConflict" setter.
	TeamUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TeamUpsert) SetName(v string) *TeamUpsert {
	u.Set(team.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamUpsert) UpdateName() *TeamUpsert {
	u.SetExcluded(team.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *TeamUpsert) SetStatus(v int) *TeamUpsert {
	u.Set(team.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TeamUpsert) UpdateStatus() *TeamUpsert {
	u.SetExcluded(team.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *TeamUpsert) AddStatus(v int) *TeamUpsert {
	u.Add(team.FieldStatus, v)
	return u
}

// SetQqGroup sets the "qq_group" field.
func (u *TeamUpsert) SetQqGroup(v string) *TeamUpsert {
	u.Set(team.FieldQqGroup, v)
	return u
}

// UpdateQqGroup sets the "qq_group" field to the value that was provided on create.
func (u *TeamUpsert) UpdateQqGroup() *TeamUpsert {
	u.SetExcluded(team.FieldQqGroup)
	return u
}

// ClearQqGroup clears the value of the "qq_group" field.
func (u *TeamUpsert) ClearQqGroup() *TeamUpsert {
	u.SetNull(team.FieldQqGroup)
	return u
}

// SetLogo sets the "logo" field.
func (u *TeamUpsert) SetLogo(v string) *TeamUpsert {
	u.Set(team.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *TeamUpsert) UpdateLogo() *TeamUpsert {
	u.SetExcluded(team.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *TeamUpsert) ClearLogo() *TeamUpsert {
	u.SetNull(team.FieldLogo)
	return u
}

// SetDesc sets the "desc" field.
func (u *TeamUpsert) SetDesc(v string) *TeamUpsert {
	u.Set(team.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TeamUpsert) UpdateDesc() *TeamUpsert {
	u.SetExcluded(team.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *TeamUpsert) ClearDesc() *TeamUpsert {
	u.SetNull(team.FieldDesc)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamUpsertOne) UpdateNewValues() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamUpsertOne) Ignore() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamUpsertOne) DoNothing() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamCreate.OnConflict
// documentation for more info.
func (u *TeamUpsertOne) Update(set func(*TeamUpsert)) *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeamUpsertOne) SetName(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateName() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TeamUpsertOne) SetStatus(v int) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TeamUpsertOne) AddStatus(v int) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateStatus() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateStatus()
	})
}

// SetQqGroup sets the "qq_group" field.
func (u *TeamUpsertOne) SetQqGroup(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetQqGroup(v)
	})
}

// UpdateQqGroup sets the "qq_group" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateQqGroup() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateQqGroup()
	})
}

// ClearQqGroup clears the value of the "qq_group" field.
func (u *TeamUpsertOne) ClearQqGroup() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.ClearQqGroup()
	})
}

// SetLogo sets the "logo" field.
func (u *TeamUpsertOne) SetLogo(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateLogo() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *TeamUpsertOne) ClearLogo() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.ClearLogo()
	})
}

// SetDesc sets the "desc" field.
func (u *TeamUpsertOne) SetDesc(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateDesc() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *TeamUpsertOne) ClearDesc() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *TeamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamCreateBulk is the builder for creating many Team entities in bulk.
type TeamCreateBulk struct {
	config
	builders []*TeamCreate
	conflict []sql.ConflictOption
}

// Save creates the Team entities in the database.
func (tcb *TeamCreateBulk) Save(ctx context.Context) ([]*Team, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Team, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeamCreateBulk) SaveX(ctx context.Context) []*Team {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeamCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeamCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Team.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TeamCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamUpsertBulk {
	tcb.conflict = opts
	return &TeamUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TeamCreateBulk) OnConflictColumns(columns ...string) *TeamUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TeamUpsertBulk{
		create: tcb,
	}
}

// TeamUpsertBulk is the builder for "upsert"-ing
// a bulk of Team nodes.
type TeamUpsertBulk struct {
	create *TeamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamUpsertBulk) UpdateNewValues() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamUpsertBulk) Ignore() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamUpsertBulk) DoNothing() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamCreateBulk.OnConflict
// documentation for more info.
func (u *TeamUpsertBulk) Update(set func(*TeamUpsert)) *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TeamUpsertBulk) SetName(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateName() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TeamUpsertBulk) SetStatus(v int) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *TeamUpsertBulk) AddStatus(v int) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateStatus() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateStatus()
	})
}

// SetQqGroup sets the "qq_group" field.
func (u *TeamUpsertBulk) SetQqGroup(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetQqGroup(v)
	})
}

// UpdateQqGroup sets the "qq_group" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateQqGroup() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateQqGroup()
	})
}

// ClearQqGroup clears the value of the "qq_group" field.
func (u *TeamUpsertBulk) ClearQqGroup() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.ClearQqGroup()
	})
}

// SetLogo sets the "logo" field.
func (u *TeamUpsertBulk) SetLogo(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateLogo() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *TeamUpsertBulk) ClearLogo() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.ClearLogo()
	})
}

// SetDesc sets the "desc" field.
func (u *TeamUpsertBulk) SetDesc(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateDesc() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *TeamUpsertBulk) ClearDesc() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.ClearDesc()
	})
}

// Exec executes the query.
func (u *TeamUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
